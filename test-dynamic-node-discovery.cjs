/**
 * Test du Syst√®me de D√©couverte Dynamique des N≈ìuds
 *
 * Ce test valide que le syst√®me de fallback universel fonctionne correctement
 * et permet √† Claude de manipuler 100% des n≈ìuds n8n.
 *
 * @version 1.0.0
 * @date 2025-01-29
 */

const advancedTools = require('./advanced-node-manipulation-tools.cjs');

// Configuration
const N8N_API_URL = process.env.N8N_API_URL || 'http://localhost:5678';
const N8N_API_KEY = process.env.N8N_API_KEY || '';

console.log('üöÄ Test du Syst√®me de D√©couverte Dynamique des N≈ìuds\n');
console.log('Configuration:');
console.log(`  N8N_API_URL: ${N8N_API_URL}`);
console.log(`  N8N_API_KEY: ${N8N_API_KEY ? '***' + N8N_API_KEY.slice(-4) : 'NOT SET'}\n`);

/**
 * Test 1: N≈ìud document√© localement (doit utiliser la base locale)
 */
async function test1_LocalNode() {
  console.log('üìù Test 1: N≈ìud document√© localement (HTTP Request)');
  console.log('Expected: Documentation d√©taill√©e depuis la base locale\n');

  try {
    const result = await advancedTools.describeNodeType(
      'n8n-nodes-base.httpRequest',
      N8N_API_URL,
      N8N_API_KEY
    );

    if (result.error) {
      console.log('‚ùå √âCHEC:', result.error);
      return false;
    }

    console.log('‚úÖ SUCC√àS');
    console.log(`   Source: ${result.source}`);
    console.log(`   Documentation Level: ${result.documentationLevel}`);
    console.log(`   Display Name: ${result.displayName}`);
    console.log(`   Param√®tres disponibles: ${Object.keys(result.parameters || {}).length}`);
    console.log(`   Exemples fournis: ${(result.examples || []).length}\n`);
    return true;
  } catch (error) {
    console.log('‚ùå ERREUR:', error.message, '\n');
    return false;
  }
}

/**
 * Test 2: N≈ìud NON document√© localement (doit utiliser le fallback API)
 */
async function test2_DynamicNode() {
  console.log('üìù Test 2: N≈ìud NON document√© (Slack)');
  console.log('Expected: Documentation basique r√©cup√©r√©e dynamiquement depuis n8n API\n');

  if (!N8N_API_KEY || N8N_API_KEY === '') {
    console.log('‚ö†Ô∏è  SKIP: N8N_API_KEY not set - cannot test dynamic discovery\n');
    return null;
  }

  try {
    const result = await advancedTools.describeNodeType(
      'n8n-nodes-base.slack',
      N8N_API_URL,
      N8N_API_KEY
    );

    if (result.error) {
      console.log('‚ùå √âCHEC:', result.error);
      if (result.suggestion) {
        console.log('   Suggestion:', result.suggestion);
      }
      return false;
    }

    console.log('‚úÖ SUCC√àS - Fallback dynamique fonctionne !');
    console.log(`   Source: ${result.source}`);
    console.log(`   Documentation Level: ${result.documentationLevel}`);
    console.log(`   Display Name: ${result.displayName}`);
    console.log(`   Param√®tres disponibles: ${Object.keys(result.parameters || {}).length}`);
    console.log(`   Note: ${result.note}\n`);
    return true;
  } catch (error) {
    console.log('‚ùå ERREUR:', error.message, '\n');
    return false;
  }
}

/**
 * Test 3: D√©couverte forc√©e avec getNodeDefinitionFromN8n
 */
async function test3_ForcedDiscovery() {
  console.log('üìù Test 3: D√©couverte forc√©e (Gmail)');
  console.log('Expected: R√©cup√©ration directe depuis l\'API sans chercher localement\n');

  if (!N8N_API_KEY || N8N_API_KEY === '') {
    console.log('‚ö†Ô∏è  SKIP: N8N_API_KEY not set - cannot test forced discovery\n');
    return null;
  }

  try {
    const result = await advancedTools.getNodeDefinitionFromN8n(
      'n8n-nodes-base.gmail',
      N8N_API_URL,
      N8N_API_KEY
    );

    if (!result) {
      console.log('‚ùå √âCHEC: Aucun r√©sultat retourn√©');
      return false;
    }

    console.log('‚úÖ SUCC√àS - D√©couverte forc√©e fonctionne !');
    console.log(`   Node Type: ${result.nodeType}`);
    console.log(`   Display Name: ${result.displayName}`);
    console.log(`   Category: ${result.category}`);
    console.log(`   Is Trigger: ${result.isTrigger}`);
    console.log(`   Credentials: ${result.credentials.length} type(s)`);
    console.log(`   Param√®tres: ${Object.keys(result.parameters).length}`);
    console.log(`   Fetched At: ${result.fetchedAt}\n`);
    return true;
  } catch (error) {
    console.log('‚ùå ERREUR:', error.message, '\n');
    return false;
  }
}

/**
 * Test 4: V√©rification du cache
 */
async function test4_CacheValidation() {
  console.log('üìù Test 4: Validation du syst√®me de cache');
  console.log('Expected: Deuxi√®me appel devrait √™tre instantan√© (depuis le cache)\n');

  if (!N8N_API_KEY || N8N_API_KEY === '') {
    console.log('‚ö†Ô∏è  SKIP: N8N_API_KEY not set\n');
    return null;
  }

  try {
    const nodeType = 'n8n-nodes-base.openai';

    // Premier appel (va interroger l'API)
    console.log('   Premier appel (API)...');
    const start1 = Date.now();
    const result1 = await advancedTools.getNodeDefinitionFromN8n(
      nodeType,
      N8N_API_URL,
      N8N_API_KEY
    );
    const time1 = Date.now() - start1;

    if (!result1) {
      console.log('‚ùå √âCHEC: Premier appel n\'a rien retourn√©');
      return false;
    }

    // Deuxi√®me appel (devrait utiliser le cache)
    console.log('   Deuxi√®me appel (Cache)...');
    const start2 = Date.now();
    const result2 = await advancedTools.getNodeDefinitionFromN8n(
      nodeType,
      N8N_API_URL,
      N8N_API_KEY
    );
    const time2 = Date.now() - start2;

    if (!result2) {
      console.log('‚ùå √âCHEC: Deuxi√®me appel n\'a rien retourn√©');
      return false;
    }

    console.log('‚úÖ SUCC√àS - Cache fonctionne !');
    console.log(`   Premier appel: ${time1}ms`);
    console.log(`   Deuxi√®me appel: ${time2}ms`);
    console.log(`   Acc√©l√©ration: ${time2 < time1 ? 'OUI' : 'NON'} (${Math.round((1 - time2/time1) * 100)}% plus rapide)\n`);
    return true;
  } catch (error) {
    console.log('‚ùå ERREUR:', error.message, '\n');
    return false;
  }
}

/**
 * Test 5: Test de n≈ìuds populaires non document√©s
 */
async function test5_PopularNodes() {
  console.log('üìù Test 5: N≈ìuds populaires non document√©s');
  console.log('Expected: Tous les n≈ìuds doivent √™tre d√©couvrables dynamiquement\n');

  if (!N8N_API_KEY || N8N_API_KEY === '') {
    console.log('‚ö†Ô∏è  SKIP: N8N_API_KEY not set\n');
    return null;
  }

  const popularNodes = [
    'n8n-nodes-base.slack',
    'n8n-nodes-base.googleSheets',
    'n8n-nodes-base.notion',
    'n8n-nodes-base.discord',
    'n8n-nodes-base.telegram',
  ];

  let successCount = 0;
  const results = [];

  for (const nodeType of popularNodes) {
    try {
      const result = await advancedTools.getNodeDefinitionFromN8n(
        nodeType,
        N8N_API_URL,
        N8N_API_KEY
      );

      if (result) {
        successCount++;
        results.push(`   ‚úÖ ${result.displayName} (${Object.keys(result.parameters).length} params)`);
      } else {
        results.push(`   ‚ùå ${nodeType} - Non trouv√©`);
      }
    } catch (error) {
      results.push(`   ‚ùå ${nodeType} - Erreur: ${error.message}`);
    }
  }

  console.log(results.join('\n'));
  console.log(`\n   R√©sultat: ${successCount}/${popularNodes.length} n≈ìuds d√©couverts avec succ√®s\n`);

  return successCount === popularNodes.length;
}

/**
 * Ex√©cuter tous les tests
 */
async function runAllTests() {
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

  const results = {
    test1: await test1_LocalNode(),
    test2: await test2_DynamicNode(),
    test3: await test3_ForcedDiscovery(),
    test4: await test4_CacheValidation(),
    test5: await test5_PopularNodes(),
  };

  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('\nüìä R√âSUM√â DES TESTS\n');

  let passed = 0;
  let failed = 0;
  let skipped = 0;

  Object.entries(results).forEach(([test, result]) => {
    if (result === true) {
      console.log(`‚úÖ ${test}: SUCC√àS`);
      passed++;
    } else if (result === false) {
      console.log(`‚ùå ${test}: √âCHEC`);
      failed++;
    } else {
      console.log(`‚ö†Ô∏è  ${test}: IGNOR√â`);
      skipped++;
    }
  });

  console.log(`\nTotal: ${passed} succ√®s, ${failed} √©checs, ${skipped} ignor√©s`);

  if (!N8N_API_KEY || N8N_API_KEY === '') {
    console.log('\n‚ö†Ô∏è  NOTE: D√©finissez N8N_API_KEY pour tester le fallback dynamique');
    console.log('   export N8N_API_KEY="votre_cl√©_api"\n');
  }

  if (failed === 0 && passed > 0) {
    console.log('\nüéâ TOUS LES TESTS ONT R√âUSSI !');
    console.log('   Le syst√®me de fallback universel est op√©rationnel.');
    console.log('   Claude peut maintenant manipuler 100% des n≈ìuds n8n ! üöÄ\n');
  } else if (failed > 0) {
    console.log('\n‚ö†Ô∏è  CERTAINS TESTS ONT √âCHOU√â');
    console.log('   V√©rifiez votre configuration n8n et l\'API key.\n');
  }

  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
}

// Ex√©cuter les tests
runAllTests().catch(error => {
  console.error('üí• Erreur fatale:', error);
  process.exit(1);
});